LEETCODE 1369

Write an SQL query to show the second most recent activity of each user.
If the user only has one activity, return that one. 
A user can't perform more than one activity at the same time. Return the result table in any order.

The query result format is in the following example:

UserActivity table:
+------------+--------------+-------------+-------------+
| username   | activity     | startDate   | endDate     |
+------------+--------------+-------------+-------------+
| Alice      | Travel       | 2020-02-12  | 2020-02-20  |
| Alice      | Dancing      | 2020-02-21  | 2020-02-23  |
| Alice      | Travel       | 2020-02-24  | 2020-02-28  |
| Bob        | Travel       | 2020-02-11  | 2020-02-18  |
+------------+--------------+-------------+-------------+

Result table:
+------------+--------------+-------------+-------------+
| username   | activity     | startDate   | endDate     |
+------------+--------------+-------------+-------------+
| Alice      | Dancing      | 2020-02-21  | 2020-02-23  |
| Bob        | Travel       | 2020-02-11  | 2020-02-18  |
+------------+--------------+-------------+-------------+

The most recent activity of Alice is Travel from 2020-02-24 to 2020-02-28, before that she was dancing from 2020-02-21 to 2020-02-23.
Bob only has one record, we just take that one.

ANSWER
   
SELECT b.username,c.activity,b.startDate,c.endDate
FROM
(SELECT username, MAX(startDate) AS 'startDate'
FROM
(SELECT username,activity,startDate,endDate,DENSE_RANK() OVER (PARTITION BY username ORDER BY endDate) rank
FROM UserActivity) a
WHERE rank<=2
GROUP BY username) b
JOIN
(SELECT username,activity,startDate,endDate,DENSE_RANK() OVER (PARTITION BY username ORDER BY endDate) rank
FROM UserActivity) c
ON b.startDate=c.startDate



LEETCODE 1412

A "quite" student is the one who took at least one exam and didn't score neither the high score nor the low score.

Write an SQL query to report the students (student_id, student_name) being "quiet" in ALL exams.

Don't return the student who has never taken any exam. Return the result table ordered by student_id.

The query result format is in the following example.

 

Student table:
+-------------+---------------+
| student_id  | student_name  |
+-------------+---------------+
| 1           | Daniel        |
| 2           | Jade          |
| 3           | Stella        |
| 4           | Jonathan      |
| 5           | Will          |
+-------------+---------------+

Exam table:
+------------+--------------+-----------+
| exam_id    | student_id   | score     |
+------------+--------------+-----------+
| 10         |     1        |    70     |
| 10         |     2        |    80     |
| 10         |     3        |    90     |
| 20         |     1        |    80     |
| 30         |     1        |    70     |
| 30         |     3        |    80     |
| 30         |     4        |    90     |
| 40         |     1        |    60     |
| 40         |     2        |    70     |
| 40         |     4        |    80     |
+------------+--------------+-----------+

Result table:
+-------------+---------------+
| student_id  | student_name  |
+-------------+---------------+
| 2           | Jade          |
+-------------+---------------+

For exam 1: Student 1 and 3 hold the lowest and high score respectively.
For exam 2: Student 1 hold both highest and lowest score.
For exam 3 and 4: Studnet 1 and 4 hold the lowest and high score respectively.
Student 2 and 5 have never got the highest or lowest in any of the exam.
Since student 5 is not taking any exam, he is excluded from the result.
So, we only return the information of Student 2.


SELECT DISTINCT(e.student_id),s.student_name
FROM Student s JOIN Exam e
ON s.student_id=e.student_id
WHERE e.student_id NOT IN

(SELECT a.student_id
FROM
(SELECT e.student_id,e.exam_id,e.score
FROM Exam e JOIN Student s
ON e.student_id=s.student_id) a
JOIN
(SELECT e.exam_id,MAX(e.score) AS 'score'
FROM Student s
JOIN Exam e ON s.student_id=e.student_id
GROUP BY e.exam_id
UNION ALL
SELECT e.exam_id,MIN(e.score) AS 'score'
FROM Student s
JOIN Exam e ON s.student_id=e.student_id
GROUP BY e.exam_id) b ON a.exam_id=b.exam_id AND a.score=b.score)


LEETCODE 1384

Write an SQL query to report the Total sales amount of each item for each year, with corresponding product name, product_id, product_name and report_year.

Dates of the sales years are between 2018 to 2020. Return the result table ordered by product_id and report_year.

The query result format is in the following example:

Product table:
+------------+--------------+
| product_id | product_name |
+------------+--------------+
| 1          | LC Phone     |
| 2          | LC T-Shirt   |
| 3          | LC Keychain  |
+------------+--------------+

Sales table:
+------------+--------------+-------------+---------------------+
| product_id | period_start | period_end  | average_daily_sales |
+------------+--------------+-------------+---------------------+
| 1          | 2019-01-25   | 2019-02-28  | 100                 |
| 2          | 2018-12-01   | 2020-01-01  | 10                  |
| 3          | 2019-12-01   | 2020-01-31  | 1                   |
+------------+--------------+-------------+---------------------+

Result table:
+------------+--------------+-------------+--------------+
| product_id | product_name | report_year | total_amount |
+------------+--------------+-------------+--------------+
| 1          | LC Phone     |    2019     | 3500         |
| 2          | LC T-Shirt   |    2018     | 310          |
| 2          | LC T-Shirt   |    2019     | 3650         |
| 2          | LC T-Shirt   |    2020     | 10           |
| 3          | LC Keychain  |    2019     | 31           |
| 3          | LC Keychain  |    2020     | 31           |
+------------+--------------+-------------+--------------+


GO
CREATE view v AS
(SELECT product_id, '2018' AS report_year,
       CASE
       WHEN period_start >= '2019-01-01' THEN 0
       WHEN period_end < '2019-01-01' AND period_start < '2019-01-01' THEN  DATEDIFF(day,period_start, period_end)+1
       ELSE DATEDIFF(day,period_start,'2019-01-01')
       END AS days_in_year,
       average_daily_sales
FROM Sales 

UNION

SELECT product_id, '2019' AS report_year,
       CASE
       WHEN period_start >= '2020-01-01' THEN 0
       WHEN period_end BETWEEN '2018-12-31' AND '2020-01-01' AND period_start BETWEEN '2018-12-31' AND '2020-01-01'  THEN  DATEDIFF(day,period_start, period_end)+1
       WHEN period_start BETWEEN '2018-12-31' AND '2020-01-01' AND period_end >= '2020-01-01' THEN DATEDIFF(day,period_start,'2020-01-01')
       WHEN period_start < '2019-01-01' AND period_end >= '2020-01-01' THEN DATEDIFF(day,'2019-01-01','2020-01-01')
	   WHEN period_start < '2019-01-01' AND period_end BETWEEN '2018-12-31' AND '2020-01-01' THEN DATEDIFF(day,'2019-01-01',period_end)+1
	   ELSE 0
	   END AS days_in_year,
       average_daily_sales
FROM Sales 

UNION

SELECT product_id, '2020' AS report_year,
       CASE
       WHEN period_start >= '2021-01-01' THEN 0
       WHEN period_end BETWEEN '2019-12-31' AND '2021-01-01' AND period_start BETWEEN '2019-12-31' AND '2021-01-01'  THEN  DATEDIFF(day,period_start, period_end)+1
       WHEN period_start BETWEEN '2019-12-31' AND '2021-01-01' AND period_end >= '2021-01-01' THEN DATEDIFF(day,period_start,'2021-01-01')
       WHEN period_start < '2020-01-01' AND period_end >= '2021-01-01' THEN DATEDIFF(day,'2020-01-01','2021-01-01')
	   WHEN period_start < '2020-01-01' AND period_end BETWEEN '2019-12-31' AND '2021-01-01' THEN DATEDIFF(day,'2020-01-01',period_end)+1
	   ELSE 0
	   END AS days_in_year,
       average_daily_sales
FROM Sales) 
GO

SELECT p.product_id,p.product_name,v.report_year,v.days_in_year*v.average_daily_sales AS 'total_amount'
FROM Product p
JOIN Sales s 
ON p.product_id=s.product_id
JOIN v
ON s.product_id=v.product_id
WHERE v.days_in_year!=0
