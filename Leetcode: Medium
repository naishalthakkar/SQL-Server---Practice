1)Write an SQL query that reports the books that have sold less than 10 copies in the last year, 
excluding books that have been available for less than 1 month from today. Assume today is 2019-06-23.

Books table:
+---------+--------------------+----------------+
| book_id | name               | available_from |
+---------+--------------------+----------------+
| 1       | "Kalila And Demna" | 2010-01-01     |
| 2       | "28 Letters"       | 2012-05-12     |
| 3       | "The Hobbit"       | 2019-06-10     |
| 4       | "13 Reasons Why"   | 2019-06-01     |
| 5       | "The Hunger Games" | 2008-09-21     |
+---------+--------------------+----------------+

Orders table:
+----------+---------+----------+---------------+
| order_id | book_id | quantity | dispatch_date |
+----------+---------+----------+---------------+
| 1        | 1       | 2        | 2018-07-26    |
| 2        | 1       | 1        | 2018-11-05    |
| 3        | 3       | 8        | 2019-06-11    |
| 4        | 4       | 6        | 2019-06-05    |
| 5        | 4       | 5        | 2019-06-20    |
| 6        | 5       | 9        | 2009-02-02    |
| 7        | 5       | 8        | 2010-04-13    |
+----------+---------+----------+---------------+

Result table:
+-----------+--------------------+
| book_id   | name               |
+-----------+--------------------+
| 1         | "Kalila And Demna" |
| 2         | "28 Letters"       |
| 5         | "The Hunger Games" |
+-----------+--------------------+


select book_id, name
from Books
where book_id not in (
    select book_id
    from Orders
    where dispatch_date >= '2018-06-23' and dispatch_date <= '2019-06-22'
    group by book_id
    having sum(quantity) >= 10)
and available_from < '2019-05-23'



2)Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, 
the next ranking number should be the next consecutive integer value. In other words, there should be no “holes” between ranks.

+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+

For example, given the above Scores table, your query should generate the following report (order by highest score):

+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+

SELECT viewer_id AS 'id'
FROM Views
GROUP BY viewer_id,view_date
HAVING COUNT(DISTINCT(article_id))>1



3)Write the following SQL query:

Find the name of the user who has rated the greatest number of the movies.
In case of a tie, return lexicographically smaller user name.

Find the movie name with the highest average rating in February 2020.
In case of a tie, return lexicographically smaller movie name..

Query is returned in 2 rows, the query result format is in the folowing example:

Movies table:
+-------------+--------------+
| movie_id    |  title       |
+-------------+--------------+
| 1           | Avengers     |
| 2           | Frozen 2     |
| 3           | Joker        |
+-------------+--------------+

Users table:
+-------------+--------------+
| user_id     |  name        |
+-------------+--------------+
| 1           | Daniel       |
| 2           | Monica       |
| 3           | Maria        |
| 4           | James        |
+-------------+--------------+

Movie_Rating table:
+-------------+--------------+--------------+-------------+
| movie_id    | user_id      | rating       | created_at  |
+-------------+--------------+--------------+-------------+
| 1           | 1            | 3            | 2020-01-12  |
| 1           | 2            | 4            | 2020-02-11  |
| 1           | 3            | 2            | 2020-02-12  |
| 1           | 4            | 1            | 2020-01-01  |
| 2           | 1            | 5            | 2020-02-17  | 
| 2           | 2            | 2            | 2020-02-01  | 
| 2           | 3            | 2            | 2020-03-01  |
| 3           | 1            | 3            | 2020-02-22  | 
| 3           | 2            | 4            | 2020-02-25  | 
+-------------+--------------+--------------+-------------+

Result table:
+--------------+
| results      |
+--------------+
| Daniel       |
| Frozen 2     |
+--------------+

Daniel and Maria have rated 3 movies ("Avengers", "Frozen 2" and "Joker") but Daniel is smaller lexicographically.
Frozen 2 and Joker have a rating average of 3.5 in February but Frozen 2 is smaller lexicographically.

SELECT results FROM
(SELECT TOP 1 u.name AS'results'
FROM Movie_Rating r JOIN Movies m ON r.movie_id=m.movie_id
JOIN Users u ON r.userid=u.userid
GROUP BY u.name
ORDER BY COUNT(*) DESC,u.name) u
UNION ALL
SELECT results FROM
(SELECT TOP 1 m.title AS 'results',CAST(AVG(r.rating) AS DECIMAL(10,2)) AS 'results1'
FROM Movie_Rating r JOIN Movies m ON r.movie_id=m.movie_id
JOIN Users u ON r.userid=u.userid
WHERE r.created_at >= '2-1-2020' AND r.created_at<'3-1-2020'
GROUP BY m.title
ORDER BY results1 DESC,m.title) r

4)Selects the product id, year, quantity, and price for the first year.
Sales table:
+---------+------------+------+----------+-------+
| sale_id | product_id | year | quantity | price |
+---------+------------+------+----------+-------+ 
| 1       | 100        | 2008 | 10       | 5000  |
| 2       | 100        | 2009 | 12       | 5000  |
| 7       | 200        | 2011 | 15       | 9000  |
+---------+------------+------+----------+-------+

Product table:
+------------+--------------+
| product_id | product_name |
+------------+--------------+
| 100        | Nokia        |
| 200        | Apple        |
| 300        | Samsung      |
+------------+--------------+

Result table:
+------------+------------+----------+-------+
| product_id | first_year | quantity | price |
+------------+------------+----------+-------+ 
| 100        | 2008       | 10       | 5000  |
| 200        | 2011       | 15       | 9000  |
+------------+------------+----------+-------+

SELECT t.product_id,t.year AS 'first_year',quantity,price
FROM Sales t
JOIN (SELECT s.product_id,MIN(year) AS 'year'
FROM Sales s
JOIN Product p
ON s.product_id=p.product_id
GROUP BY s.product_id) a
ON t.product_id=a.product_id AND t.year=a.year



5)You would like to compute the scores of all teams after all matches. Points are awarded as follows:

A team receives three points if they win a match (Score strictly more goals than the opponent team).
A team receives one point if they draw a match (Same number of goals as the opponent team).
A team receives no points if they lose a match (Score less goals than the opponent team).
Write an SQL query that selects the team_id, team_name and num_points of each team in the tournament after all described matches. Result table should be ordered by num_points (decreasing order). In case of a tie, order the records by team_id (increasing order).

The query result format is in the following example:

Teams table:
+-----------+--------------+
| team_id   | team_name    |
+-----------+--------------+
| 10        | Leetcode FC  |
| 20        | NewYork FC   |
| 30        | Atlanta FC   |
| 40        | Chicago FC   |
| 50        | Toronto FC   |
+-----------+--------------+

Matches table:
+------------+--------------+---------------+-------------+--------------+
| match_id   | host_team    | guest_team    | host_goals  | guest_goals  |
+------------+--------------+---------------+-------------+--------------+
| 1          | 10           | 20            | 3           | 0            |
| 2          | 30           | 10            | 2           | 2            |
| 3          | 10           | 50            | 5           | 1            |
| 4          | 20           | 30            | 1           | 0            |
| 5          | 50           | 30            | 1           | 0            |
+------------+--------------+---------------+-------------+--------------+

Result table:
+------------+--------------+---------------+
| team_id    | team_name    | num_points    |
+------------+--------------+---------------+
| 10         | Leetcode FC  | 7             |
| 20         | NewYork FC   | 3             |
| 50         | Toronto FC   | 3             |
| 30         | Atlanta FC   | 1             |
| 40         | Chicago FC   | 0             |
+------------+--------------+---------------+


SELECT w.team_name, SUM(m.points) AS 'num_points'
FROM Teams w LEFT JOIN 
(SELECT host_team_name AS 'team_name',SUM(host_points) AS 'points'
FROM
(SELECT t1.team_name AS 'host_team_name',t2.team_name AS 'guest_team_name',m.host_team,m.guest_team, CASE
WHEN m.host_goals>m.guest_goals THEN 3
WHEN m.host_goals=m.guest_goals THEN 1
ELSE 0 END AS 'host_points',CASE
WHEN m.guest_goals>m.host_goals THEN 3
WHEN m.host_goals=m.guest_goals THEN 1
ELSE 0 END AS 'guest_points'
FROM Teams t1 JOIN Matches m ON m.host_team=t1.team_id
JOIN Teams t2 ON m.guest_team=t2.team_id) k
GROUP BY host_team_name
UNION ALL
SELECT guest_team_name AS 'team_name',SUM(guest_points) AS 'points'
FROM
(SELECT t1.team_name AS 'host_team_name',t2.team_name AS 'guest_team_name',m.host_team,m.guest_team, CASE
WHEN m.host_goals>m.guest_goals THEN 3
WHEN m.host_goals=m.guest_goals THEN 1
ELSE 0 END AS 'host_points',CASE
WHEN m.guest_goals>m.host_goals THEN 3
WHEN m.host_goals=m.guest_goals THEN 1
ELSE 0 END AS 'guest_points'
FROM Teams t1 JOIN Matches m ON m.host_team=t1.team_id
JOIN Teams t2 ON m.guest_team=t2.team_id) l
GROUP BY guest_team_name)
m 
ON w.team_name=m.team_name
GROUP BY w.team_name


6)--Write an SQL query to find the total score for each gender at each day.
--
--Order the result table by gender and day
--
--The query result format is in the following example:
--
--Scores table:
--+-------------+--------+------------+--------------+
--| player_name | gender | day        | score_points |
--+-------------+--------+------------+--------------+
--| Aron        | F      | 2020-01-01 | 17           |
--| Alice       | F      | 2020-01-07 | 23           |
--| Bajrang     | M      | 2020-01-07 | 7            |
--| Khali       | M      | 2019-12-25 | 11           |
--| Slaman      | M      | 2019-12-30 | 13           |
--| Joe         | M      | 2019-12-31 | 3            |
--| Jose        | M      | 2019-12-18 | 2            |
--| Priya       | F      | 2019-12-31 | 23           |
--| Priyanka    | F      | 2019-12-30 | 17           |
--+-------------+--------+------------+--------------+
--Result table:
--+--------+------------+-------+
--| gender | day        | total |
--+--------+------------+-------+
--| F      | 2019-12-30 | 17    |
--| F      | 2019-12-31 | 40    |
--| F      | 2020-01-01 | 57    |
--| F      | 2020-01-07 | 80    |
--| M      | 2019-12-18 | 2     |
--| M      | 2019-12-25 | 13    |
--| M      | 2019-12-30 | 26    |
--| M      | 2019-12-31 | 29    |
--| M      | 2020-01-07 | 36    |
--+--------+------------+-------+

SELECT gender, day,
SUM (score_points) OVER (PARTITION BY CAST(gender AS VARCHAR(100)) ORDER BY day) AS total
FROM Scores

7)Write an SQL query to report the number of calls and the total call duration between each pair of distinct persons (person1, person2) where person1 < person2.

Return the result table in any order.

The query result format is in the following example:

 

Calls table:
+---------+-------+----------+
| from_id | to_id | duration |
+---------+-------+----------+
| 1       | 2     | 59       |
| 2       | 1     | 11       |
| 1       | 3     | 20       |
| 3       | 4     | 100      |
| 3       | 4     | 200      |
| 3       | 4     | 200      |
| 4       | 3     | 499      |
+---------+-------+----------+

Result table:
+---------+---------+------------+----------------+
| person1 | person2 | call_count | total_duration |
+---------+---------+------------+----------------+
| 1       | 2       | 2          | 70             |
| 1       | 3       | 1          | 20             |
| 3       | 4       | 4          | 999            |


CREATE VIEW v3 
AS
SELECT from_id,to_id,SUM(duration) AS 'duration',COUNT(*) AS 'count' 
FROM Calls 
GROUP BY from_id,to_id;

CREATE VIEW v4
AS
SELECT from_id,to_id,SUM(duration) AS 'duration',COUNT(*) AS 'count'
FROM Calls 
GROUP BY from_id,to_id;

SELECT v3.from_id,v3.to_id,v3.count+ISNULL(v4.count,0) AS 'call_count',v3.duration+ISNULL(v4.duration,0) AS 'total_duration' FROM 
v3 LEFT JOIN v4 ON v3.to_id=v4.from_id AND v3.from_id=v4.to_id
WHERE v3.to_id>v3.from_id


8)Write an SQL query to find the most frequently ordered product(s) for each customer.

The result table should have the product_id and product_name for each customer_id who ordered at least one order. Return the result table in any order.

The query result format is in the following example:

Customers
+-------------+-------+
| customer_id | name  |
+-------------+-------+
| 1           | Alice |
| 2           | Bob   |
| 3           | Tom   |
| 4           | Jerry |
| 5           | John  |
+-------------+-------+

Orders
+----------+------------+-------------+------------+
| order_id | order_date | customer_id | product_id |
+----------+------------+-------------+------------+
| 1        | 2020-07-31 | 1           | 1          |
| 2        | 2020-07-30 | 2           | 2          |
| 3        | 2020-08-29 | 3           | 3          |
| 4        | 2020-07-29 | 4           | 1          |
| 5        | 2020-06-10 | 1           | 2          |
| 6        | 2020-08-01 | 2           | 1          |
| 7        | 2020-08-01 | 3           | 3          |
| 8        | 2020-08-03 | 1           | 2          |
| 9        | 2020-08-07 | 2           | 3          |
| 10       | 2020-07-15 | 1           | 2          |
+----------+------------+-------------+------------+

Products
+------------+--------------+-------+
| product_id | product_name | price |
+------------+--------------+-------+
| 1          | keyboard     | 120   |
| 2          | mouse        | 80    |
| 3          | screen       | 600   |
| 4          | hard disk    | 450   |
+------------+--------------+-------+
Result table:
+-------------+------------+--------------+
| customer_id | product_id | product_name |
+-------------+------------+--------------+
| 1           | 2          | mouse        |
| 2           | 1          | keyboard     |
| 2           | 2          | mouse        |
| 2           | 3          | screen       |
| 3           | 3          | screen       |
| 4           | 1          | keyboard     |
+-------------+------------+--------------+

SELECT customer_id,Products.product_id,product_name
FROM
(SELECT customer_id,product_id,order_count,RANK() OVER (PARTITION BY customer_id ORDER BY order_count DESC) AS 'rank'
FROM
(SELECT customer_id,product_id,COUNT(DISTINCT order_id) AS 'order_count'
FROM Orders
GROUP BY customer_id,product_id) as table1) AS order_counts_ranked 
JOIN Products ON Products.product_id=order_counts_ranked.product_id
WHERE rank=1

9)
A university uses 2 data tables, student and department, to store data about its students and the departments associated with each major.
Write a query to print the respective department name and number of students majoring in each department for all departments in the department table (even ones with no current students).
Sort your results by descending number of students; if two or more departments have the same number of students, then sort those departments alphabetically by department name.

student table:

| student_id | student_name | gender | dept_id |
|------------|--------------|--------|---------|
| 1          | Jack         | M      | 1       |
| 2          | Jane         | F      | 1       |
| 3          | Mark         | M      | 2       |
department table:

| dept_id | dept_name   |
|---------|-------------|
| 1       | Engineering |
| 2       | Science     |
| 3       | Law         |
The Output should be:

| dept_name   | student_number |
|-------------|----------------|
| Engineering | 2              |
| Science     | 1              |
| Law         | 0              |


SELECT dept_name, COUNT(student_id) AS 'student_number' FROM department d
LEFT JOIN student s ON d.dept_id=s.dept_id
GROUP BY dept_name
ORDER BY COUNT(student_id) DESC

10) Users table:
+------------+--------------+-------------+
| user_id    | user_name    | credit      |
+------------+--------------+-------------+
| 1          | Moustafa     | 100         |
| 2          | Jonathan     | 200         |
| 3          | Winston      | 10000       |
| 4          | Luis         | 800         | 
+------------+--------------+-------------+

Transactions table:
+------------+------------+------------+----------+---------------+
| trans_id   | paid_by    | paid_to    | amount   | transacted_on |
+------------+------------+------------+----------+---------------+
| 1          | 1          | 3          | 400      | 2020-08-01    |
| 2          | 3          | 2          | 500      | 2020-08-02    |
| 3          | 2          | 1          | 200      | 2020-08-03    |
+------------+------------+------------+----------+---------------+

Result table:
+------------+------------+------------+-----------------------+
| user_id    | user_name  | credit     | credit_limit_breached |
+------------+------------+------------+-----------------------+
| 1          | Moustafa   | -100       | Yes                   | 
| 2          | Jonathan   | 500        | No                    |
| 3          | Winston    | 9900       | No                    |
| 4          | Luis       | 800        | No                    |
+------------+------------+------------+-----------------------+
Moustafa paid $400 on "2020-08-01" and received $200 on "2020-08-03", credit (100 -400 +200) = -$100
Jonathan received $500 on "2020-08-02" and paid $200 on "2020-08-08", credit (200 +500 -200) = $500
Winston received $400 on "2020-08-01" and paid $500 on "2020-08-03", credit (10000 +400 -500) = $9990
Luis didn't received any transfer, credit = $800


SELECT user_id,user_name,credit,
CASE WHEN credit>0 THEN 'No'
ELSE 'Yes'
END AS 'credit_limit_reached'
FROM (SELECT v1.user_id,v1.user_name, SUM(v1.credit) AS 'credit' FROM
(SELECT u1.user_id,u1.user_name,u1.credit-ISNULL(t1.amount,0) AS 'credit' FROM Users u1
LEFT JOIN Transactions t1 ON u1.user_id=t1.paid_by
LEFT JOIN Users u2 ON u2.user_id=t1.paid_to

UNION ALL

SELECT ISNULL(u2.user_id,4) AS 'user_id', ISNULL(u2.user_name,'Luis') AS 'user_name',ISNULL(t1.amount,0) AS 'credit' FROM Users u1
LEFT JOIN Transactions t1 ON u1.user_id=t1.paid_by
LEFT JOIN Users u2 ON u2.user_id=t1.paid_to
) AS v1
GROUP BY v1.user_id,v1.user_name) v2
ORDER BY user_id


